const std = @import("std");
const debug = std.debug;
const ziggysynth = @import("ziggysynth.zig");
const SoundFont = ziggysynth.SoundFont;
const PresetRegion = ziggysynth.PresetRegion;

fn areEqual(x: f64, y: f64) bool {
    if (@floor(x) == @ceil(x) and @floor(y) == @ceil(y)) {
        return x == y;
    }

    const m = if (@fabs(x) > @fabs(y)) @fabs(x) else @fabs(y);
    const limit = m / 1000.0;
    const delta = @fabs(x - y);

    return delta < limit;
}

fn check(region: *const PresetRegion, values: *const [39]f64) void {
    debug.assert(areEqual(@floatFromInt(f64, region.getModulationLfoToPitch()), values[0]));
    debug.assert(areEqual(@floatFromInt(f64, region.getVibratoLfoToPitch()), values[1]));
    debug.assert(areEqual(@floatFromInt(f64, region.getModulationEnvelopeToPitch()), values[2]));
    debug.assert(areEqual(region.getInitialFilterCutoffFrequency(), values[3]));
    debug.assert(areEqual(region.getInitialFilterQ(), values[4]));
    debug.assert(areEqual(@floatFromInt(f64, region.getModulationLfoToFilterCutoffFrequency()), values[5]));
    debug.assert(areEqual(@floatFromInt(f64, region.getModulationEnvelopeToFilterCutoffFrequency()), values[6]));
    debug.assert(areEqual(region.getModulationLfoToVolume(), values[7]));
    debug.assert(areEqual(region.getChorusEffectsSend(), values[8]));
    debug.assert(areEqual(region.getReverbEffectsSend(), values[9]));
    debug.assert(areEqual(region.getPan(), values[10]));
    debug.assert(areEqual(region.getDelayModulationLfo(), values[11]));
    debug.assert(areEqual(region.getFrequencyModulationLfo(), values[12]));
    debug.assert(areEqual(region.getDelayVibratoLfo(), values[13]));
    debug.assert(areEqual(region.getFrequencyVibratoLfo(), values[14]));
    debug.assert(areEqual(region.getDelayModulationEnvelope(), values[15]));
    debug.assert(areEqual(region.getAttackModulationEnvelope(), values[16]));
    debug.assert(areEqual(region.getHoldModulationEnvelope(), values[17]));
    debug.assert(areEqual(region.getDecayModulationEnvelope(), values[18]));
    debug.assert(areEqual(region.getSustainModulationEnvelope(), values[19]));
    debug.assert(areEqual(region.getReleaseModulationEnvelope(), values[20]));
    debug.assert(areEqual(@floatFromInt(f64, region.getKeyNumberToModulationEnvelopeHold()), values[21]));
    debug.assert(areEqual(@floatFromInt(f64, region.getKeyNumberToModulationEnvelopeDecay()), values[22]));
    debug.assert(areEqual(region.getDelayVolumeEnvelope(), values[23]));
    debug.assert(areEqual(region.getAttackVolumeEnvelope(), values[24]));
    debug.assert(areEqual(region.getHoldVolumeEnvelope(), values[25]));
    debug.assert(areEqual(region.getDecayVolumeEnvelope(), values[26]));
    debug.assert(areEqual(region.getSustainVolumeEnvelope(), values[27]));
    debug.assert(areEqual(region.getReleaseVolumeEnvelope(), values[28]));
    debug.assert(areEqual(@floatFromInt(f64, region.getKeyNumberToVolumeEnvelopeHold()), values[29]));
    debug.assert(areEqual(@floatFromInt(f64, region.getKeyNumberToVolumeEnvelopeDecay()), values[30]));
    debug.assert(areEqual(@floatFromInt(f64, region.getKeyRangeStart()), values[31]));
    debug.assert(areEqual(@floatFromInt(f64, region.getKeyRangeEnd()), values[32]));
    debug.assert(areEqual(@floatFromInt(f64, region.getVelocityRangeStart()), values[33]));
    debug.assert(areEqual(@floatFromInt(f64, region.getVelocityRangeEnd()), values[34]));
    debug.assert(areEqual(region.getInitialAttenuation(), values[35]));
    debug.assert(areEqual(@floatFromInt(f64, region.getCoarseTune()), values[36]));
    debug.assert(areEqual(@floatFromInt(f64, region.getFineTune()), values[37]));
    debug.assert(areEqual(@floatFromInt(f64, region.getScaleTuning()), values[38]));
}

test "TimGM6mb Preset" {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    const allocator = gpa.allocator();
    defer debug.assert(gpa.deinit() == .ok);

    var file = try std.fs.cwd().openFile("TimGM6mb.sf2", .{});
    defer file.close();

    var sf = try SoundFont.init(allocator, file.reader());
    defer sf.deinit();

    // ============================================================
    //  Flute TB
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[0].regions[0], &values);
    }

    // ============================================================
    //  Orchestra
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[1].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[1].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[1].regions[2], &values);
    }

    // ============================================================
    //  Brush
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[2].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[2].regions[1], &values);
    }

    // ============================================================
    //  Jazz
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[3].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[3].regions[1], &values);
    }

    // ============================================================
    //  TR 808
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[4].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[4].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[4].regions[2], &values);
    }

    // ============================================================
    //  Electronic
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[5].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[5].regions[1], &values);
    }

    // ============================================================
    //  Power
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[6].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[6].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[6].regions[2], &values);
    }

    // ============================================================
    //  Room
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[7].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[7].regions[1], &values);
    }

    // ============================================================
    //  Standard
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[8].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[8].regions[1], &values);
    }

    // ============================================================
    //  Gun Shot
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[9].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[9].regions[1], &values);
    }

    // ============================================================
    //  Applause
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[10].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[10].regions[1], &values);
    }

    // ============================================================
    //  Helicopter
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[11].regions[0], &values);
    }

    // ============================================================
    //  Telephone
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[12].regions[0], &values);
    }

    // ============================================================
    //  Bird
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[13].regions[0], &values);
    }

    // ============================================================
    //  Seashore
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[14].regions[0], &values);
    }

    // ============================================================
    //  Breath Noise
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[15].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[15].regions[1], &values);
    }

    // ============================================================
    //  Fret Noise
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[16].regions[0], &values);
    }

    // ============================================================
    //  Reverse Cymbal
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[17].regions[0], &values);
    }

    // ============================================================
    //  Synth Drum
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[18].regions[0], &values);
    }

    // ============================================================
    //  Melodic Tom
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[19].regions[0], &values);
    }

    // ============================================================
    //  Taiko Drum
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[20].regions[0], &values);
    }

    // ============================================================
    //  Wood Block
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[21].regions[0], &values);
    }

    // ============================================================
    //  Steel Drum
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[22].regions[0], &values);
    }

    // ============================================================
    //  Agogo
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[23].regions[0], &values);
    }

    // ============================================================
    //  Tinker Bell
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[24].regions[0], &values);
    }

    // ============================================================
    //  Shenai
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[25].regions[0], &values);
    }

    // ============================================================
    //  Fiddle
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[26].regions[0], &values);
    }

    // ============================================================
    //  Bagpipe
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[27].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[27].regions[1], &values);
    }

    // ============================================================
    //  Kalimba
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[28].regions[0], &values);
    }

    // ============================================================
    //  Koto
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[29].regions[0], &values);
    }

    // ============================================================
    //  Shamisen
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[30].regions[0], &values);
    }

    // ============================================================
    //  Banjo
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[31].regions[0], &values);
    }

    // ============================================================
    //  Sitar
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[32].regions[0], &values);
    }

    // ============================================================
    //  Star Theme
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[33].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[33].regions[1], &values);
    }

    // ============================================================
    //  Echo Drops
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[34].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[34].regions[1], &values);
    }

    // ============================================================
    //  Goblin
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[35].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[35].regions[1], &values);
    }

    // ============================================================
    //  Brightness
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[36].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[36].regions[1], &values);
    }

    // ============================================================
    //  Atmosphere
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[37].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[37].regions[1], &values);
    }

    // ============================================================
    //  Crystal
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[38].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[38].regions[1], &values);
    }

    // ============================================================
    //  Soundtrack
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[39].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[39].regions[1], &values);
    }

    // ============================================================
    //  IceRain
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[40].regions[0], &values);
    }

    // ============================================================
    //  Sweep Pad
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[41].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[41].regions[1], &values);
    }

    // ============================================================
    //  Halo Pad
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[42].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[42].regions[1], &values);
    }

    // ============================================================
    //  Metal Pad
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[43].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[43].regions[1], &values);
    }

    // ============================================================
    //  Bowed Glass
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[44].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[44].regions[1], &values);
    }

    // ============================================================
    //  Space Voice
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[45].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[45].regions[1], &values);
    }

    // ============================================================
    //  Poly Synth
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[46].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[46].regions[1], &values);
    }

    // ============================================================
    //  Warm Pad
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[47].regions[0], &values);
    }

    // ============================================================
    //  Fantasia
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[48].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[48].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[48].regions[2], &values);
    }

    // ============================================================
    //  Bass & Lead
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[49].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[49].regions[1], &values);
    }

    // ============================================================
    //  5th Saw Wave
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[50].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[50].regions[1], &values);
    }

    // ============================================================
    //  Solo Vox
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[51].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[51].regions[1], &values);
    }

    // ============================================================
    //  Charang
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[52].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[52].regions[1], &values);
    }

    // ============================================================
    //  Chiffer Lead
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[53].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[53].regions[1], &values);
    }

    // ============================================================
    //  Synth Calliope
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[54].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[54].regions[1], &values);
    }

    // ============================================================
    //  Saw Wave
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[55].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[55].regions[1], &values);
    }

    // ============================================================
    //  Square Wave
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[56].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[56].regions[1], &values);
    }

    // ============================================================
    //  Ocarina
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[57].regions[0], &values);
    }

    // ============================================================
    //  Whistle
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[58].regions[0], &values);
    }

    // ============================================================
    //  Shakuhachi
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[59].regions[0], &values);
    }

    // ============================================================
    //  Bottle Chiff
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[60].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[60].regions[1], &values);
    }

    // ============================================================
    //  Pan Flute
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[61].regions[0], &values);
    }

    // ============================================================
    //  Recorder
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[62].regions[0], &values);
    }

    // ============================================================
    //  Piccolo
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[63].regions[0], &values);
    }

    // ============================================================
    //  Clarinet
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[64].regions[0], &values);
    }

    // ============================================================
    //  Bassoon
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[65].regions[0], &values);
    }

    // ============================================================
    //  English Horn
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[66].regions[0], &values);
    }

    // ============================================================
    //  Oboe (Orch)
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[67].regions[0], &values);
    }

    // ============================================================
    //  French Horns
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[68].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[68].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[68].regions[2], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[68].regions[3], &values);
    }

    // ============================================================
    //  Synth Brass 2
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[69].regions[0], &values);
    }

    // ============================================================
    //  Synth Brass 1
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[70].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[70].regions[1], &values);
    }

    // ============================================================
    //  Brass
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[71].regions[0], &values);
    }

    // ============================================================
    //  Mute Trumpet
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[72].regions[0], &values);
    }

    // ============================================================
    //  Tuba
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[73].regions[0], &values);
    }

    // ============================================================
    //  Trombone
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[74].regions[0], &values);
    }

    // ============================================================
    //  SoloTrumpet
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[75].regions[0], &values);
    }

    // ============================================================
    //  Orchestra Hit
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[76].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[76].regions[1], &values);
    }

    // ============================================================
    //  Synth Vox
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[77].regions[0], &values);
    }

    // ============================================================
    //  Voice Oohs
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[78].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[78].regions[1], &values);
    }

    // ============================================================
    //  Synth Strings 2
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[79].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[79].regions[1], &values);
    }

    // ============================================================
    //  Timpani
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[80].regions[0], &values);
    }

    // ============================================================
    //  Harp LP
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[81].regions[0], &values);
    }

    // ============================================================
    //  Pizzicato
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[82].regions[0], &values);
    }

    // ============================================================
    //  Contrabass
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[83].regions[0], &values);
    }

    // ============================================================
    //  Cello
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[84].regions[0], &values);
    }

    // ============================================================
    //  Viola
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[85].regions[0], &values);
    }

    // ============================================================
    //  Violin
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[86].regions[0], &values);
    }

    // ============================================================
    //  Synth Bass 2
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[87].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[87].regions[1], &values);
    }

    // ============================================================
    //  Synth Bass 1
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[88].regions[0], &values);
    }

    // ============================================================
    //  Slap Bass 2
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[89].regions[0], &values);
    }

    // ============================================================
    //  Slap Bass 1
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[90].regions[0], &values);
    }

    // ============================================================
    //  Fretless Bass
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[91].regions[0], &values);
    }

    // ============================================================
    //  Picked Bass
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[92].regions[0], &values);
    }

    // ============================================================
    //  Fingered Bass
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[93].regions[0], &values);
    }

    // ============================================================
    //  Acoustic Bass
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[94].regions[0], &values);
    }

    // ============================================================
    //  Guitar Harmonics
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[95].regions[0], &values);
    }

    // ============================================================
    //  DistortionGuitar
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[96].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[96].regions[1], &values);
    }

    // ============================================================
    //  Overdrive Guitar
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[97].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[97].regions[1], &values);
    }

    // ============================================================
    //  Guitar Mutes
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[98].regions[0], &values);
    }

    // ============================================================
    //  Clean Guitar
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[99].regions[0], &values);
    }

    // ============================================================
    //  Jazz Guitar
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[100].regions[0], &values);
    }

    // ============================================================
    //  Steel Guitar
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[101].regions[0], &values);
    }

    // ============================================================
    //  Nylon Guitar
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[102].regions[0], &values);
    }

    // ============================================================
    //  Bandoneon
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[103].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[103].regions[1], &values);
    }

    // ============================================================
    //  Harmonica
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[104].regions[0], &values);
    }

    // ============================================================
    //  Accordion
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[105].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[105].regions[1], &values);
    }

    // ============================================================
    //  Reed Organ
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[106].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[106].regions[1], &values);
    }

    // ============================================================
    //  Church Organ
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[107].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[107].regions[1], &values);
    }

    // ============================================================
    //  Organ 3
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[108].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[108].regions[1], &values);
    }

    // ============================================================
    //  Organ 2
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[109].regions[0], &values);
    }

    // ============================================================
    //  Organ 1
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[110].regions[0], &values);
    }

    // ============================================================
    //  Dulcimer
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[111].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[111].regions[1], &values);
    }

    // ============================================================
    //  Tubular Bells
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[112].regions[0], &values);
    }

    // ============================================================
    //  Xylophone
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[113].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[113].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[113].regions[2], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[113].regions[3], &values);
    }

    // ============================================================
    //  Marimba
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[114].regions[0], &values);
    }

    // ============================================================
    //  Vibraphone
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[115].regions[0], &values);
    }

    // ============================================================
    //  MusicBox
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[116].regions[0], &values);
    }

    // ============================================================
    //  Glockenspiel
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[117].regions[0], &values);
    }

    // ============================================================
    //  Celesta
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[118].regions[0], &values);
    }

    // ============================================================
    //  Clavinet
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[119].regions[0], &values);
    }

    // ============================================================
    //  Harpsichord
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[120].regions[0], &values);
    }

    // ============================================================
    //  E.Piano 2
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[121].regions[0], &values);
    }

    // ============================================================
    //  E.Piano 1
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[122].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[122].regions[1], &values);
    }

    // ============================================================
    //  Honky Tonk
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[123].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[123].regions[1], &values);
    }

    // ============================================================
    //  Piano 3
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[124].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[124].regions[1], &values);
    }

    // ============================================================
    //  Piano 2
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[125].regions[0], &values);
    }

    // ============================================================
    //  Piano 1
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[126].regions[0], &values);
    }

    // ============================================================
    //  BariSax (TB) v2.3
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[127].regions[0], &values);
    }

    // ============================================================
    //  Tenor Sax (TB) v2.3
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[128].regions[0], &values);
    }

    // ============================================================
    //  AltoSax (TB) v2.3
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[129].regions[0], &values);
    }

    // ============================================================
    //  SopSax (TB) v2.3
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[130].regions[0], &values);
    }

    // ============================================================
    //  Choir Aahs
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[131].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[131].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[131].regions[2], &values);
    }

    // ============================================================
    //  Synth Strings 1
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[132].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[132].regions[1], &values);
    }

    // ============================================================
    //  Slow Strings LP
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[133].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[133].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[133].regions[2], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[133].regions[3], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[133].regions[4], &values);
    }

    // ============================================================
    //  Strings CLP
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[134].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[134].regions[1], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[134].regions[2], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[134].regions[3], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[134].regions[4], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[134].regions[5], &values);
    }

    // ============================================================
    //  Strings (Tremelo)
    // ============================================================
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[135].regions[0], &values);
    }
    {
        const values = [_]f64{ 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 127, 0, 127, 0, 0, 0, 0 };
        check(&sf.presets[135].regions[1], &values);
    }
}
